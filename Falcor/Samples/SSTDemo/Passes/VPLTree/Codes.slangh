#pragma once

uint expand_bits(uint v)
{
    v = (v * 0x00010001u) & 0xFF0000FFu;
    v = (v * 0x00000101u) & 0x0F00F00Fu;
    v = (v * 0x00000011u) & 0xC30C30C3u;
    v = (v * 0x00000005u) & 0x49249249u;
    return v;
}

uint morton_code(float3 xyz, float resolution = 1024.0f)
{
    xyz.x = min(max(xyz.x * resolution, 0.0f), resolution - 1.0f);
    xyz.y = min(max(xyz.y * resolution, 0.0f), resolution - 1.0f);
    xyz.z = min(max(xyz.z * resolution, 0.0f), resolution - 1.0f);
    uint xx = expand_bits(uint(xyz.x));
    uint yy = expand_bits(uint(xyz.y));
    uint zz = expand_bits(uint(xyz.z));
    return xx * 4 + yy * 2 + zz;
}

void updateSmallestIndexAndDistance(inout float smallestDistance, inout int smallestIndex, float currentDistance, int currentIndex)
{
    if (currentDistance < smallestDistance)
    {
        smallestIndex = currentIndex;
        smallestDistance = currentDistance;
    }
}

void shift_update(inout int integer, int value, int value_size_in_bit = 1)
{
    integer <<= value_size_in_bit;
    integer |= value;
}

uint direction_code_bits(const int sections)
{
    return (3 + 2 * sections + 1) + 1;
}

int direction_code(const float3 vec, const int sections)
{
    //this function takes a direction vector (normalized) i.e. a point on the unit sphere centered on 0,0,0.
    //it splits the unit sphere into the 8 octants and then treats each as a triangle in space that gets tesselated
    //the points on the sphere are categorized with their squared distance

    if (dot(vec, vec) < 0.0001)
    {
        //we found a source "omnidirectional" light (indicated by its normal vector being equal to 0). needs its own index
        return (1 << (3 + 2 * sections + 1)); //3 shifts for the octant + 2 * sections as each subdivision has 4 divison.
    }

    // get base vector::defines the quadrant the vector is in
    int final_int = 0;
    float3 x_base_vec = { 0,0,0 };
    float3 y_base_vec = { 0,0,0 };
    float3 z_base_vec = { 0,0,0 };

    float3 plane_normal = { 0,0,0 };
    float normal_constant = 1.f / sqrt(3.f); // all normals do have the same constant value their only difference is their sign
    if (vec.x >= 0)
    {
        x_base_vec.x = 1;
        shift_update(final_int, 1);
        plane_normal.x = normal_constant;
    }
    else
    {
        x_base_vec.x = -1;
        shift_update(final_int, 0);
        plane_normal.x = -normal_constant;
    }
    if (vec.y >= 0)
    {
        y_base_vec.y = 1;
        shift_update(final_int, 1);
        plane_normal.y = normal_constant;
    }
    else
    {
        y_base_vec.y = -1;
        shift_update(final_int, 0);
        plane_normal.y = -normal_constant;
    }
    if (vec.z >= 0)
    {
        z_base_vec.z = 1;
        shift_update(final_int, 1);
        plane_normal.z = normal_constant;
    }
    else
    {
        z_base_vec.z = -1;
        shift_update(final_int, 0);
        plane_normal.z = -normal_constant;
    }


    float scaling_factor = normal_constant / dot(plane_normal, vec);

    float3 projected_vec = vec * scaling_factor;
    //float3 projected_vec = vec ;

    for (int i = 0; i < sections; i++)
    {
        float3 xy_mix_vector = normalize(x_base_vec + y_base_vec);
        float3 xz_mix_vector = normalize(x_base_vec + z_base_vec);
        float3 yz_mix_vector = normalize(y_base_vec + z_base_vec);

        float distSq_x = dot(projected_vec, x_base_vec);
        float distSq_y = dot(projected_vec, y_base_vec);
        float distSq_z = dot(projected_vec, z_base_vec);

        float distSq_xy = dot(projected_vec, xy_mix_vector);
        float distSq_xz = dot(projected_vec, xz_mix_vector);
        float distSq_yz = dot(projected_vec, yz_mix_vector);

        float subsection0 = distSq_y + distSq_xy + distSq_yz; //corner with y (top part)
        float subsection1 = distSq_z + distSq_xz + distSq_yz; //corner with z (left part)
        float subsection2 = distSq_x + distSq_xy + distSq_xz; //corner with x (right part)
        float subsection3 = (distSq_xz + distSq_xy + distSq_yz) * 0.85f; //middle part. multiplied with 0.85 as this somewhat compensates the projected curvature of this method and balances the deviations over all subsections

        float smallest_distance = 100; //distances cant be bigger than 4. we pick 100 to just to be sure
        int smallest_index = -1;

        updateSmallestIndexAndDistance(smallest_distance, smallest_index, subsection0, 0);
        updateSmallestIndexAndDistance(smallest_distance, smallest_index, subsection1, 1);
        updateSmallestIndexAndDistance(smallest_distance, smallest_index, subsection2, 2);
        updateSmallestIndexAndDistance(smallest_distance, smallest_index, subsection3, 3);

        //updating the new basevectors for next iteration
        if (smallest_index == 0)
        {
            x_base_vec = xy_mix_vector;
            z_base_vec = yz_mix_vector;
        }
        if (smallest_index == 1)
        {
            x_base_vec = xz_mix_vector;
            y_base_vec = yz_mix_vector;
        }
        if (smallest_index == 2)
        {
            y_base_vec = xy_mix_vector;
            z_base_vec = xz_mix_vector;
        }
        if (smallest_index == 3)
        {
            x_base_vec = xy_mix_vector;
            y_base_vec = yz_mix_vector;
            z_base_vec = xz_mix_vector;
        }

        shift_update(final_int, smallest_index, 2);
    }
    return final_int;
}
